<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="kr.co.gongsaeng.mapper.AdminMapper">

	<!-- main.jsp -->
	<!-- 현재 총 매출 -->
	<select id="selectTotalPayment" resultType="String">
	<![CDATA[
		SELECT SUM(payment) AS 'totalPayment'
		FROM payment 
		WHERE pay_status = 1 AND (pay_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND pay_date > SUBTIME(now(),CURTIME())) 
	]]>	
	</select>

	<!-- 현재 총 예약건수 -->
	<select id="selectCountPayment" resultType="String">
	<![CDATA[
		SELECT COUNT(pay_num) AS 'countPayment'
		FROM payment 
		WHERE pay_status = 1 AND (pay_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND pay_date > SUBTIME(now(),CURTIME())) 
	]]>	
	</select>
	
	<!--신규가입자수  -->
	<select id="selectNewMemberCount" resultType="String">
	<![CDATA[
		SELECT COUNT(member_id) AS 'newMemberCount'
		FROM member 
		WHERE member_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND member_date > SUBTIME(now(),CURTIME()) 
				AND member_status = 1
	]]>	
	</select>
	
	<!-- 누적회원수   -->
	<select id="selectCulmulativeMemberCount" resultType="String">
		SELECT COUNT(member_id) AS 'cumulativeMemberCount'
		FROM member 
		WHERE member_status = 1
	</select>

	<!--신규 반장가입자수  -->
	<select id="selectNewBanjangCount" resultType="String">
	<![CDATA[
		SELECT COUNT(member_id) AS 'newBanjangCount'
		FROM member 
		WHERE member_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND member_date > SUBTIME(now(),CURTIME()) 
				AND member_status = 1 AND member_category = 2
	]]>	
	</select>
	
	<!-- 누적반장수   -->
	<select id="selectCulmulativeBanjangCount" resultType="String">
		SELECT COUNT(member_id) AS 'cumulativeBanjangCount'
		FROM member 
		WHERE member_status = 1 AND member_category = 2
	</select>

	<!-- 이번달 예약건수   -->
	<select id="selectMonthlyPayCount" resultType="String">
	<![CDATA[
		SELECT COUNT(pay_num) AS 'monthlyPayCount'
		FROM payment 
		WHERE pay_status = 1 AND (pay_date >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY) AND pay_date <= last_day(now()))
	]]>		
	</select>
	
	<!-- 누적 예약건수   -->
	<select id="selectCumulativePayCount" resultType="String">
		SELECT COUNT(pay_num) AS 'cumulativePayCount'
		FROM payment
		WHERE pay_status = 1 
	</select>

	<!-- 이번달 총매출   -->
	<select id="selectMonthlyTotalPay" resultType="String">
	<![CDATA[
		SELECT SUM(payment) AS 'monthlyTotalPay'
		FROM payment 
		WHERE pay_status = 1 AND (pay_date >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY) AND pay_date <= last_day(now()))
	]]>		
	</select>
	
	<!-- 누적 총매출   -->
	<select id="selectCumulativeTotalPay" resultType="String">
		SELECT SUM(payment) AS 'cumulativeTotalPay'
		FROM payment
		WHERE pay_status = 1 
	</select>
	
	<!-- 이번달 환급금   -->
	<select id="selectMonthlyRefund" resultType="String">
	<![CDATA[
		SELECT SUM(payment) AS 'monthlyRefund'
		FROM payment 
		WHERE pay_status = 1 AND (pay_date >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY) AND pay_date <= last_day(now()))
				AND pay_cal_status = 4
	]]>		
	</select>
	
	<!-- 누적 환급금   -->
	<select id="selectCumulativeRefund" resultType="String">
		SELECT SUM(payment) AS 'cumulativeRefund'
		FROM payment
		WHERE pay_status = 1 AND pay_cal_status = 4
	</select>

	<!-- 이번달 환급 수익   -->
	<select id="selectMonthlyRefundFee" resultType="String">
	<![CDATA[
		SELECT  FLOOR(SUM(payment * 0.1)) AS 'monthlyRefundFee'
		FROM payment 
		WHERE pay_status = 1 AND (pay_date >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY) AND pay_date <= last_day(now()))
				AND pay_cal_status = 4
	]]>		
	</select>
	
	<!-- 누적 환급 수익   -->
	<select id="selectCumulativeRefundFee" resultType="String">
		SELECT  FLOOR(SUM(payment * 0.1)) AS 'cumulativeRefundFee'
		FROM payment
		WHERE pay_status = 1 AND pay_cal_status = 4
	</select>
	
	<!-- 오늘의 할일 중 -->
	<!-- 사업체 가입 신청   -->
	<select id="selectNewComRegCount" resultType="String">
	<![CDATA[
		SELECT COUNT(com_idx) AS 'newComRegCount'
		FROM company
		WHERE com_status = 2 AND (com_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND com_date > SUBTIME(now(),CURTIME()))
	]]>		
	</select>

	<!-- 사업체 환급 신청   -->
	<select id="selectComRefundApp" resultType="String">
	<![CDATA[
		SELECT COUNT(pay_num) AS 'newComRefundApp'
		FROM payment
		WHERE pay_status = 1 AND pay_cal_status = 2 AND (pay_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND pay_date > SUBTIME(now(),CURTIME()))
	]]>		
	</select>
	
	<!-- 클래스 신고 -->
	<select id="selectNewClassReport" resultType="String">
	<![CDATA[
		SELECT COUNT(report_idx) AS 'newClassReport'
		FROM report
		WHERE report_status = 1 AND report_category = 2 AND (report_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND report_date > SUBTIME(now(),CURTIME()))
	]]>		
	</select>
	
	<!-- 리뷰 신고 -->
	<select id="selectNewReviewReport" resultType="String">
	<![CDATA[
		SELECT COUNT(report_idx) AS 'newReviewReport'
		FROM report
		WHERE report_status = 1 AND report_category = 1  AND (report_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND report_date > SUBTIME(now(),CURTIME()))
	]]>		
	</select>
	
	<!-- 채팅문의 -->
	<select id="selectNewQnaChat" resultType="String">
	<![CDATA[
		SELECT COUNT(chat_read) AS 'newQnaChat'
		FROM chat
		WHERE chat_read = 1 AND chat_receiver = 'admin1234'  AND (chat_date <= SUBTIME(now() + INTERVAL  1 day,CURTIME()) AND chat_date > SUBTIME(now(),CURTIME()))
	]]>		
	</select>
	
	<!-- 그래프 올해 매출 -->
	<select id="selectThisYearPay" resultType="admin">
		SELECT (SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 1 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'jan'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 2 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'feb'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 3 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'mar'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 4 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'apr'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 5 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'may'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 6 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'jun'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 7 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'jul'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 8 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'aug'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 9 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'sep'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 10 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'oct'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 11 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'nov'
			,(SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 12 AND YEAR(pay_date) = YEAR(now()) AND pay_status = 1) AS 'dec'
	</select>
	<!-- 그래프 올해 환급수익 -->
	<select id="selectThisYearRef" resultType="admin">
		SELECT (SELECT IFNULL(SUM(payment),0) FROM payment WHERE MONTH(pay_date) = 1 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'jan'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 2 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'feb'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 3 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'mar'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 4 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'apr'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 5 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'may'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 6 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'jun'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 7 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'jul'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 8 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'aug'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 9 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'sep'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 10 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'oct'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 11 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'nov'
			,(SELECT IFNULL(SUM(payment) * 0.1,0) FROM payment WHERE MONTH(pay_date) = 12 AND YEAR(pay_date) = YEAR(now()) AND pay_cal_status = 3  AND pay_status = 1) AS 'dec'
	</select>
	<!-- 그래프 올해 사업체 가입수 -->
	<select id="selectThisYearCom" resultType="admin">
		SELECT (SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 1 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'jan'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 2 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'feb'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 3 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'mar'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 4 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'apr'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 5 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'may'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 6 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'jun'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 7 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'jul'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 8 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'aug'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 9 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'sep'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 10 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'oct'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 11 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'nov'
			,(SELECT IFNULL(COUNT(com_idx),0) FROM company WHERE MONTH(com_date) = 12 AND YEAR(com_date) = YEAR(now()) AND  com_status = 1) AS 'dec'
	</select>
	<!-- 그래프 올해 회원 가입수 -->
	<select id="selectThisYearMem" resultType="admin">
		SELECT (SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 1 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'jan'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 2 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'feb'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 3 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'mar'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 4 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'apr'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 5 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'may'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 6 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'jun'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 7 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'jul'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 8 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'aug'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 9 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'sep'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 10 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'oct'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 11 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'nov'
			,(SELECT IFNULL(COUNT(member_id),0) FROM member WHERE MONTH(member_date) = 12 AND YEAR(member_date) = YEAR(now()) AND  member_status = 1) AS 'dec'
	</select>
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<!-- member.jsp -->
	<!-- 회원목록(신고수,사업체 상태 포함) 조회 -->
	<select id="selectMemberList" resultType="member">
		SELECT member.*, company.com_status, reportCount 
		FROM member
		LEFT OUTER JOIN company ON member.member_id = company.member_id
		LEFT OUTER JOIN ( SELECT review.member_id, COUNT(report.review_idx) AS reportCount
			 FROM report ,review
			 WHERE report.review_idx = review.review_idx
			 GROUP BY review.member_id) reportCount
		ON member.member_id = reportCount.member_id
		ORDER BY member_date DESC
	</select>
	
	<!--필터링 회원목록 조회 -->
	<!-- 전체선택 해제 -->
	<select id="selectFilterMemberNotAll" resultType="member">
		SELECT member.*, company.com_status, reportCount 
		FROM member
		LEFT OUTER JOIN company ON member.member_id = company.member_id
		LEFT OUTER JOIN ( SELECT review.member_id, COUNT(report.review_idx) AS reportCount
						 FROM report ,review
						 WHERE report.review_idx = review.review_idx
						 GROUP BY review.member_id) reportCount
		ON member.member_id = reportCount.member_id
		WHERE
		<choose>
			<when test="map.com_status2.equals(2)"> 
				company.com_status = 2
				<if test="map.com_status5.equals(5)"> 
					OR company.com_status = 5
				</if>
				<if test="map.member_category2.equals(2)"> 
				 	OR member.member_category = 2
				</if>
				<if test="map.member_category1.equals(1)"> 
					OR (member.member_category = 1
					AND company.com_status = null)
				</if>
				<if test="map.member_status1.equals(1)">
					OR member.member_status = 1
				</if>
				<if test="map.member_status2.equals(2)">
					OR member.member_status = 2
				</if>
				<if test="map.member_status3.equals(3)">
					OR member.member_status = 3
				</if>
			</when>
			<when test="map.com_status5.equals(5)"> 
				company.com_status = 5
				<if test="map.member_status1.equals(1)">
					OR member.member_status = 1
				</if>
				<if test="map.member_status2.equals(2)">
					OR member.member_status = 2
				</if>
				<if test="map.member_status3.equals(3)">
					OR member.member_status = 3
				</if>
			</when>
			<when test="map.member_category2.equals(2)"> 
				member.member_category = 2
				<if test="map.member_status1.equals(1)">
					OR member.member_status = 1
				</if>
				<if test="map.member_status2.equals(2)">
					OR member.member_status = 2
				</if>
				<if test="map.member_status3.equals(3)">
					OR member.member_status = 3
				</if>
			</when>
			<when test="map.member_category1.equals(1)"> 
				(member.member_category = 1
				AND company.com_status = null)
				<if test="map.member_status1.equals(1)">
					OR member.member_status = 1
				</if>
				<if test="map.member_status2.equals(2)">
					OR member.member_status = 2
				</if>
				<if test="map.member_status3.equals(3)">
					OR member.member_status = 3
				</if>
			</when>
		</choose> 
		ORDER BY member_date DESC
	</select>
	<!-- 회원목록 상태 전체체크 해제 -->	
	<select id="selectFilterMemberCategoryAll" resultType="member">
		SELECT member.*, company.com_status, reportCount 
		FROM member
		LEFT OUTER JOIN company ON member.member_id = company.member_id
		LEFT OUTER JOIN ( SELECT review.member_id, COUNT(report.review_idx) AS reportCount
						 FROM report ,review
						 WHERE report.review_idx = review.review_idx
						 GROUP BY review.member_id) reportCount
		ON member.member_id = reportCount.member_id
		WHERE
		<choose>
			<when test="member_status1.equals(1)">
				member.member_status = 1
				<if test="member_status.equals(2)">
					OR member.member_status = 2
				</if>	
				<if test="member_status.equals(3)">
					OR member.member_status = 3
				</if>	
			</when>
			<when test="member_status.equals(2)">
				member.member_status = 2
				<if test="member_status.equals(3)">
					OR member.member_status = 3
				</if>
			</when>
			<when test="member_status.equals(3)">
				member.member_status = 3
			</when>
		</choose>
	</select>
	
	<!-- 회원목록 분류 전체체크 해제 -->	
	<select id="selectFilterMemberStatusAll" resultType="member">
		SELECT member.*, company.com_status, reportCount 
		FROM member
		LEFT OUTER JOIN company ON member.member_id = company.member_id
		LEFT OUTER JOIN ( SELECT review.member_id, COUNT(report.review_idx) AS reportCount
						 FROM report ,review
						 WHERE report.review_idx = review.review_idx
						 GROUP BY review.member_id) reportCount
		ON member.member_id = reportCount.member_id
		WHERE
		<choose>
			<when test="com_status2.equals(2)">
				company.com_status = 2
				<if test="com_status5.equals(5)">
					OR company.com_status = 5
				</if>	
				<if test="member_category.equals(2)">
					OR member.member_category = 2
				</if>	
				<if test="member_category.equals(1)">
					OR (member.member_category = 1
					AND company.com_status = null)
				</if>	
			</when>
			<when test="com_status5.equals(5)">
				company.com_status = 5
				<if test="member_category.equals(2)">
					OR member.member_category = 2
				</if>	
				<if test="member_category.equals(1)">
					OR (member.member_category = 1
					AND company.com_status = null)
				</if>
			</when>
			<when test="member_category.equals(2)">
				member.member_category = 2
				<if test="member_category.equals(1)">
					OR (member.member_category = 1
					AND company.com_status = null)
				</if>
			</when>
			<when test="member_category.equals(1)">
				member.member_category = 1
				AND company.com_status = null
			</when>
		</choose>
	</select>
	<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	<!-- member_detail.jsp -->
	<!-- 회원정보 조회 -->
	<select id="selectMember" resultType="member">
		SELECT *
		FROM member
		WHERE member_id = #{member_id};
	</select>
	
	<!-- 계좌정보 조회 -->
	<select id="selectAccount" resultType="account">
		SELECT *
		FROM account
		WHERE member_id = #{member_id};
	</select>
	
	<!-- (예약)결제수 조회 -->
	<select id="selectPayCount" resultType="payment">
		<![CDATA[
			SELECT COUNT(pay_num) AS 'classRes'
				 , (SELECT COUNT(pay_num) FROM payment p , class c WHERE (p.class_idx = c.class_idx AND c.class_category = 2) AND p.member_id = #{member_id}) AS 'oneDayRes'
				 , (SELECT COUNT(pay_num) FROM payment p , class c WHERE (p.class_idx = c.class_idx AND c.class_category = 1) AND p.member_id = #{member_id}) AS 'regularRes'
				 , (SELECT COUNT(pay_num) FROM payment p WHERE (pay_date >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY)
																				AND pay_date <= last_day(now())) 
				 															AND p.member_id = #{member_id}) AS 'classMonthRes'
				 , (SELECT COUNT(pay_num) FROM payment p , class c WHERE (p.class_idx = c.class_idx AND c.class_category = 2) 
				 															AND (pay_date >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY)
																				AND pay_date <= last_day(now())) 	 															
				 															AND p.member_id = #{member_id}) AS 'oneDayMonthRes'
				 , (SELECT COUNT(pay_num) FROM payment p , class c WHERE (p.class_idx = c.class_idx AND c.class_category = 1) 
				 															AND (pay_date >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY)
																				AND pay_date <= last_day(now())) 
				 															AND p.member_id = #{member_id}) AS 'regularMonthRes'
			FROM payment
			WHERE member_id = #{member_id} AND pay_status = 1
		]]>	
	</select>
	
	<!-- 리뷰수 조회 -->
	<!--
	  'reviewTotal' - 회원이 남긴 총리뷰수 
	  'reviewMonth' -회원이 남긴 이번달 리뷰수
	  'reviewReport' - 신고당한 리뷰수 
	-->
	<select id="selectReviewCount" resultType="review">
		<![CDATA[
			SELECT COUNT(review_idx) AS 'reviewTotal'
			,(SELECT COUNT(review_idx)
			  FROM review
			  WHERE (review_regdate >= (last_day(now() - INTERVAL 1 month) + INTERVAL 1 DAY)
					AND review_regdate <= last_day(now())) AND member_id = #{member_id}) AS 'reviewMonth'
			,(SELECT COUNT(report_idx)
			  FROM report, review  
			  WHERE report.review_idx = review.review_idx AND review.member_id = #{member_id} ) AS 'reviewReport' 
			FROM review 
			WHERE member_id = #{member_id}
		]]>	
	</select>
	
	<!-- 사업체 조회 -->
	<select id="selectCompany" resultType="company">
		SELECT *
		FROM company
		WHERE member_id = #{member_id};
	</select>
	
	<!-- 클래스등록수 조회 --> 
	<select id="selectClassCount" resultType="gclass">
		SELECT COUNT(class_idx) AS 'totalClass'
		, (SELECT COUNT(class_category) FROM class WHERE class_category = 2 AND member_id = #{member_id}) AS 'oneDayClass'
		, (SELECT COUNT(class_category) FROM class WHERE class_category = 1 AND member_id = #{member_id}) AS 'regularClass'
		FROM class
		WHERE member_id = #{member_id}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateModifyMember">
		UPDATE member 
		SET member_status = #{member_status}
			, member_nick = #{member_nick}
			, member_email = #{member_email}
			, member_img = #{member_img}
		WHERE member_id = #{member_id}
	</update>
	<!-- 반장승인 -->
	<update id="updateMemberCategory">
		UPDATE member 
		SET member_category = 2
		WHERE member_id = #{member_id}
	</update>
	<update id="updateStatusApproval">
		UPDATE company 
		SET com_status = 1
		WHERE member_id = #{member_id}
	</update>
	<!-- 반장 거부 -->
	<update id="updateStatusRejection">
		UPDATE company 
		SET com_status = 5
		WHERE member_id = #{member_id}
	</update>
	
<!-- 	reservation_class.jsp -->
<!-- 	특정회원의 클래스 결제(예약)상세 내역 -->
	<select id="selectClassPayList" resultType="payment">
		SELECT payment.*, company.com_name, class.class_category, class.class_title 
		FROM payment
		INNER JOIN company ON company.com_idx = payment.com_idx
		INNER JOIN class ON class.class_idx = payment.class_idx
		WHERE payment.member_id = #{member_id} AND pay_status = 1
	</select>
	
	<!-- review.jsp -->
	<!-- 특정회원의 리뷰 내역 -->
	<select id="selectMemberReviewList" resultType="review">
		SELECT review.*, class.class_title
		FROM review, class
		WHERE review.member_id = #{member_id} AND class.class_idx = review.class_idx
	</select>

	<!-- company.jsp -->
	<!-- 사업체 목록 조회 -->
	<select id="selectCompanyList" resultType="company">
		SELECT *
		FROM company
	</select>

	<!-- company_refund.jsp -->
	<!-- 사업체 환급금 목록 조회 -->
	<!-- 신청금 -->
	<select id="selectRefundList" resultType="payment">
		SELECT p.refund_request_date,p.refund_date, p.payment ,p.pay_cal_status , c.com_name 
		FROM payment p ,company c
		WHERE  p.com_idx = c.com_idx AND pay_status = 1
	</select>

	<!-- class.jsp -->
	<!-- 클래스 목록 조회 -->
	<select id="selectClassList" resultType="gclass">
		SELECT class.* ,com.com_name, classReportCount
		FROM class 
		INNER JOIN company com ON com.member_id = class.member_id
		LEFT OUTER JOIN ( SELECT class_idx, COUNT(class_idx) AS classReportCount
						 FROM report
						 GROUP BY class_idx) classReportCount
		ON class.class_idx = classReportCount.class_idx
		ORDER BY class_date
	</select>
	
	<!-- account_member.jsp -->
	<!-- 등록계좌 목록 -->
	<select id="selectAccountList" resultType="account">
		SELECT *
		FROM account
	</select>

	<!-- OPay_*.jsp -->
	<!-- 페이 충전송금 목록 -->
	<select id="selectCashList" resultType="cash">
		SELECT *
		FROM cash
	</select>

	<!-- event.jsp -->
	<!-- 이벤트 목록 -->
	<select id="selectEventList" resultType="board">
		SELECT *
		FROM board
	</select>

	<!-- coupon.jsp -->
	<!-- 쿠폰 목록 -->
	<select id="selectCouponList" resultType="coupon">
		SELECT *
		FROM coupon
	</select>

	<!-- report_class.jsp -->
	<!-- 클래스신고 목록 -->
	<select id="selectReportClassList" resultType="report">
		SELECT report.*, class.class_title 'class_title', class.member_id 'banjangMember_id', company.com_name 'com_name'
		FROM report , class , company
		WHERE report.class_idx = class.class_idx and class.member_id = company.member_id
	</select>
	<!-- report_review.jsp -->
	<!-- 리뷰신고 목록 -->
	<select id="selectReportReviewList" resultType="report">
		SELECT report.*, review.member_id 'reviewerMember_id'
		FROM report , review
		WHERE report.review_idx = review.review_idx
	</select>
	
	
</mapper>