<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.gongsaeng.mapper.SearchMapper">

	<!-- 메인 - 클래스(최신순) 뿌리기 -->
	<select id="selectRecentClassList">
		SELECT
			cl.*
			, co.com_idx
			, co.com_name
			, SUBSTRING(cl.class_address1, 1, LOCATE('구', cl.class_address1) + 1) AS 'classAddress'
			, (SELECT COUNT(bo.member_id) 
				FROM bookmark bo 
				WHERE bo.class_idx = cl.class_idx
			) AS 'bookmarkCount'
			, (SELECT 
			    bo.bookmark_idx
				FROM bookmark bo
				WHERE bo.class_idx = cl.class_idx AND bo.member_id = #{member_id}
			) AS 'isBookmark_idx'
		FROM class cl
			JOIN company co
				ON co.member_id = cl.member_id
		WHERE
			cl.class_end_date >= CURDATE()
		GROUP BY 
			cl.class_idx
			, co.com_idx
		ORDER BY		
			cl.class_idx DESC;
	</select>
	
	<!-- 메인 - 클래스(인기순) 뿌리기 -->
	<select id="selectPopularClassList">
		SELECT
			cl.*
			, co.com_idx
			, co.com_name
			, SUBSTRING(cl.class_address1, 1, LOCATE('구', cl.class_address1) + 1) AS 'classAddress'
			, COALESCE(SUM(pa.res_member_count), 0) AS 'resTotalCount'
			, (SELECT COUNT(bo.member_id) 
				FROM bookmark bo 
				WHERE bo.class_idx = cl.class_idx
			) AS 'bookmarkCount'
			, (SELECT 
			    bo.bookmark_idx
				FROM bookmark bo
				WHERE bo.class_idx = cl.class_idx AND bo.member_id = #{member_id}
			) AS 'isBookmark_idx'
		FROM class cl
			JOIN company co
				ON co.member_id = cl.member_id
			LEFT JOIN payment pa
				ON pa.class_idx = cl.class_idx
		WHERE
			<!-- 종료되지 않은 클래스 기준 -->
			<!-- 종료일 >= 오늘날짜 -->
			<!-- 종료일  = 오늘날짜일 경우 : 종료시간 > 지금시간 -->
			cl.class_end_date &gt; CURDATE()
				OR (cl.class_end_date = CURDATE()
					AND cl.class_end_time &gt; CURTIME())
		GROUP BY 
			cl.class_idx
			, co.com_idx
		ORDER BY		
			resTotalCount DESC
			, bookmarkCount DESC;
	</select>
	
	<!-- 메인 - 클래스(마감임박순) 뿌리기 -->
	<select id="selectDeadlineSoonClassList">
		SELECT
			cl.*
			, co.com_idx
			, co.com_name
			, SUBSTRING(cl.class_address1, 1, LOCATE('구', cl.class_address1) + 1) AS 'classAddress'
			, COALESCE(SUM(pa.res_member_count), 0) AS 'resTotalCount'
			, (SELECT COUNT(bo.member_id) 
				FROM bookmark bo 
				WHERE bo.class_idx = cl.class_idx
			) AS 'bookmarkCount'
			, (SELECT 
			    bo.bookmark_idx
				FROM bookmark bo
				WHERE bo.class_idx = cl.class_idx AND bo.member_id = #{member_id}
			) AS 'isBookmark_idx'
		FROM class cl
			JOIN company co
				ON co.member_id = cl.member_id
			LEFT JOIN payment pa
				ON pa.class_idx = cl.class_idx
		GROUP BY 
			cl.class_idx
			, co.com_idx
		HAVING
			<!-- 예약인원수 < 최대인원수 -->
			resTotalCount &lt; cl.class_member_count
			<!-- 시작일 >= 오늘날짜 -->
			<!-- 시작일  = 오늘날짜인 경우 : 시작시간 > 지금시간 -->
			AND (
				cl.class_start_date &gt; CURDATE()
					OR (cl.class_start_date = CURDATE()
						AND cl.class_start_time &gt; CURTIME())
				)
		ORDER BY
			<!-- 1순위 : 시작일 / 2순위 : 시작시간 -->
			cl.class_start_date ASC
			, cl.class_start_time ASC;
	</select>
	
	<!-- 메인 - 최신 리뷰 뿌리기 -->
	<select id="selectRecentReviewList">
		SELECT
			re.*
			, cl.class_title
		FROM review re
			JOIN class cl
				ON cl.class_idx = re.class_idx
		ORDER BY review_idx DESC;
	</select>
	
	<!-- 검색결과 -->
	<select id="selectSearchClassList">
		SELECT
			cl.*
			, co.com_idx
			, co.com_name
			, COALESCE(SUM(pa.res_member_count), 0) AS 'resTotalCount'
			, SUBSTRING(cl.class_address1, 1, LOCATE('구', cl.class_address1) + 1) AS 'classAddress'
			, (SELECT COUNT(bo.member_id) 
				FROM bookmark bo 
				WHERE bo.class_idx = cl.class_idx
			) AS 'bookmarkCount'
			, (SELECT 
			    bo.bookmark_idx
				FROM bookmark bo
				WHERE bo.class_idx = cl.class_idx AND bo.member_id = #{member_id}
			) AS 'isBookmark_idx'
		FROM class cl
			JOIN company co
				ON cl.member_id = co.member_id
			LEFT JOIN payment pa
				ON pa.class_idx = cl.class_idx
		GROUP BY
			cl.class_idx
			, co.com_idx
		HAVING
		<!-- 클래스 타입 -->
		<choose>
			<when test="searchData.classType != 0">
				cl.class_category = #{searchData.classType}
			</when>
			<otherwise>
				1=1
			</otherwise>
		</choose>
		<!-- 클래스명 키워드 -->
		<if test="searchData.className != null and !searchData.className.equals('')">
		AND
			cl.class_title LIKE CONCAT('%',#{searchData.className},'%')
		</if>
		<!-- 클래스 카테고리 대분류 -->
		<if test="searchData.classMainCategory != null and !searchData.classMainCategory.equals('')">
		AND
			cl.class_main_category = #{searchData.classMainCategory}
		</if>
		<!-- 클래스 카테고리 소분류 -->
		<if test="searchData.classSubCategory != null and !searchData.classSubCategory.equals('')">
		AND
			cl.class_sub_category = #{searchData.classSubCategory}
		</if>
		<!-- 클래스 상태 -->
		AND
		<choose>
			<!-- 클래스 상태 : 모집중 -->
			<when test="searchData.classState == 'classState1'">
				<!-- 예약인원수 < 최대인원수 -->
				resTotalCount &lt; cl.class_member_count
				<!-- 시작일 >= 오늘날짜 -->
				<!-- 시작일  = 오늘날짜인 경우 : 시작시간 > 지금시간 -->
				AND (
					cl.class_start_date &gt; CURDATE()
						OR (cl.class_start_date = CURDATE()
							AND cl.class_start_time &gt; CURTIME())
					)
			</when>
			<!-- 클래스 상태 : 마감(이되 진행중이 아닌 것) -->
			<when test="searchData.classState == 'classState2'">
				<!-- 예약인원수 >= 최대인원수 -->
				resTotalCount &gt;= cl.class_member_count
				<!-- 시작일 >= 오늘날짜 -->
				<!-- 시작일  = 오늘날짜인 경우 : 시작시간 > 지금시간 -->
				AND (
					cl.class_start_date &gt; CURDATE()
						OR (cl.class_start_date = CURDATE()
							AND cl.class_start_time &gt; CURTIME())
					)
			</when>
			<!-- 클래스 상태 : 진행중 -->
			<when test="searchData.classState == 'classState3'">
				<!-- 예약인원수 > 0 -->
				<!-- 최소인원수나 진행중 기준 이런거 플젝 마감일에야 생각나서 제외 -->
<!-- 				resTotalCount &gt; 0 -->
				<!-- 시작일 <= 오늘날짜 -->
				<!-- 시작일  = 오늘날짜인 경우 : 시작시간 <= 지금시간 -->
				(cl.class_start_date &lt; CURDATE()
					OR (cl.class_start_date = CURDATE()
						AND cl.class_start_time &lt;= CURTIME()))
				<!-- 종료일 >= 오늘날짜 -->
				<!-- 종료일  = 오늘날짜일 경우 : 종료시간 > 지금시간 -->
				AND (cl.class_end_date &gt; CURDATE()
						OR (cl.class_end_date = CURDATE()
							AND cl.class_end_time &gt; CURTIME()))
			</when>
			<!-- 클래스 상태 : 종료 -->
			<when test="searchData.classState == 'classState4'">
				<!-- 종료일 <= 오늘날짜 -->
				<!-- 종료일  = 오늘날짜일 경우 : 종료시간 <= 지금시간 -->
				cl.class_end_date &lt; CURDATE()
					OR (cl.class_end_date = CURDATE()
						AND cl.class_end_time &lt;= CURTIME())
			</when>
			<!-- 클래스 상태 : 전체(searchData.classState == 'classState0') -->			
			<otherwise>
				1=1
			</otherwise>
		</choose>
		<!-- 클래스 요일 -->
		<if test="searchData.classDay != null and searchData.classDay != '0000000' and !searchData.classDay.equals('')">
		AND (
		  (SUBSTRING(#{searchData.classDay}, 1, 1) = '1' AND SUBSTRING(cl.class_day, 1, 1) = '1') OR
		  (SUBSTRING(#{searchData.classDay}, 2, 1) = '1' AND SUBSTRING(cl.class_day, 2, 1) = '1') OR
		  (SUBSTRING(#{searchData.classDay}, 3, 1) = '1' AND SUBSTRING(cl.class_day, 3, 1) = '1') OR
		  (SUBSTRING(#{searchData.classDay}, 4, 1) = '1' AND SUBSTRING(cl.class_day, 4, 1) = '1') OR
		  (SUBSTRING(#{searchData.classDay}, 5, 1) = '1' AND SUBSTRING(cl.class_day, 5, 1) = '1') OR
		  (SUBSTRING(#{searchData.classDay}, 6, 1) = '1' AND SUBSTRING(cl.class_day, 6, 1) = '1') OR
		  (SUBSTRING(#{searchData.classDay}, 7, 1) = '1' AND SUBSTRING(cl.class_day, 7, 1) = '1')
		)
		</if>
		<!-- 클래스 시작일 -->
		<if test="searchData.classStartDate != null and !searchData.classStartDate.equals('')">
		AND
			cl.class_start_Date &gt;= #{searchData.classStartDate}
		</if>
		<!-- 클래스 종료일 -->
		<if test="searchData.classEndDate != null and !searchData.classEndDate.equals('')">
		AND
			cl.class_end_Date &lt;= #{searchData.classEndDate}
		</if>
		<!-- 클래스 시작시간 -->
		<if test="searchData.classStartTime != ':00' and !searchData.classStartTime.equals('')">
		AND
			cl.class_start_time &gt;= #{searchData.classStartTime}
		</if>
		<!-- 클래스 종료시간 -->
		<if test="searchData.classEndTime != ':00' and !searchData.classEndTime.equals('')">
		AND
			cl.class_end_time &lt;= #{searchData.classEndTime}
		</if>
		<!-- 기타 제공사항 -->
		<if test="searchData.classOffering != null and searchData.classOffering != '0000000' and !searchData.classOffering.equals('')">
		AND
			SUBSTRING(class_offering, 1, 1) >= SUBSTRING(#{searchData.classOffering}, 1, 1)
				AND SUBSTRING(class_offering, 2, 1) >= SUBSTRING(#{searchData.classOffering}, 2, 1)
				AND SUBSTRING(class_offering, 3, 1) >= SUBSTRING(#{searchData.classOffering}, 3, 1)
				AND SUBSTRING(class_offering, 4, 1) >= SUBSTRING(#{searchData.classOffering}, 4, 1)
				AND SUBSTRING(class_offering, 5, 1) >= SUBSTRING(#{searchData.classOffering}, 5, 1)
				AND SUBSTRING(class_offering, 6, 1) >= SUBSTRING(#{searchData.classOffering}, 6, 1)
				AND SUBSTRING(class_offering, 7, 1) >= SUBSTRING(#{searchData.classOffering}, 7, 1)
		</if>
		<!-- 클래스 금액 -->
		AND
			cl.class_price BETWEEN #{searchData.minAmount} AND #{searchData.maxAmount}
		ORDER BY
			<choose>
				<when test="searchData.sort != null and searchData.sort == 'sort_popular'">
					resTotalCount DESC
					, bookmarkCount DESC
				</when>
				<otherwise>
					cl.class_idx DESC
				</otherwise>
			</choose>
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 검색결과 갯수 -->
	<select id="selectSearchClassCount" resultType="int">
		SELECT COUNT(*) AS 'searchResultCount'
		FROM (
			SELECT
				cl.*
				, co.com_idx
				, co.com_name
				, COALESCE(SUM(pa.res_member_count), 0) AS 'resTotalCount'
				, SUBSTRING(cl.class_address1, 1, LOCATE('구', cl.class_address1) + 1) AS 'classAddress'
				, (SELECT COUNT(bo.member_id) 
					FROM bookmark bo 
					WHERE bo.class_idx = cl.class_idx
				) AS 'bookmarkCount'
				, (SELECT 
				    bo.bookmark_idx
					FROM bookmark bo
					WHERE bo.class_idx = cl.class_idx AND bo.member_id = #{member_id}
				) AS 'isBookmark_idx'
			FROM class cl
				JOIN company co
					ON cl.member_id = co.member_id
				LEFT JOIN payment pa
					ON pa.class_idx = cl.class_idx
			GROUP BY
				cl.class_idx
				, co.com_idx
			HAVING
			<!-- 클래스 타입 -->
			<choose>
				<when test="searchData.classType != 0">
					cl.class_category = #{searchData.classType}
				</when>
				<otherwise>
					1=1
				</otherwise>
			</choose>
			<!-- 클래스명 키워드 -->
			<if test="searchData.className != null and !searchData.className.equals('')">
			AND
				cl.class_title LIKE CONCAT('%',#{searchData.className},'%')
			</if>
			<!-- 클래스 카테고리 대분류 -->
			<if test="searchData.classMainCategory != null and !searchData.classMainCategory.equals('')">
			AND
				cl.class_main_category = #{searchData.classMainCategory}
			</if>
			<!-- 클래스 카테고리 소분류 -->
			<if test="searchData.classSubCategory != null and !searchData.classSubCategory.equals('')">
			AND
				cl.class_sub_category = #{searchData.classSubCategory}
			</if>
			<!-- 클래스 상태 -->
			AND
			<choose>
				<!-- 클래스 상태 : 모집중 -->
				<when test="searchData.classState == 'classState1'">
					<!-- 예약인원수 < 최대인원수 -->
					resTotalCount &lt; cl.class_member_count
					<!-- 시작일 >= 오늘날짜 -->
					<!-- 시작일  = 오늘날짜인 경우 : 시작시간 > 지금시간 -->
					AND (
						cl.class_start_date &gt; CURDATE()
							OR (cl.class_start_date = CURDATE()
								AND cl.class_start_time &gt; CURTIME())
						)
				</when>
				<!-- 클래스 상태 : 마감(이되 진행중이 아닌 것) -->
				<when test="searchData.classState == 'classState2'">
					<!-- 예약인원수 >= 최대인원수 -->
					resTotalCount &gt;= cl.class_member_count
					<!-- 시작일 >= 오늘날짜 -->
					<!-- 시작일  = 오늘날짜인 경우 : 시작시간 > 지금시간 -->
					AND (
						cl.class_start_date &gt; CURDATE()
							OR (cl.class_start_date = CURDATE()
								AND cl.class_start_time &gt; CURTIME())
						)
				</when>
				<!-- 클래스 상태 : 진행중 -->
				<when test="searchData.classState == 'classState3'">
					<!-- 예약인원수 > 0 -->
					<!-- 최소인원수나 진행중 기준 이런거 플젝 마감일에야 생각나서 제외 -->
<!-- 					resTotalCount &gt; 0 -->
					<!-- 시작일 <= 오늘날짜 -->
					<!-- 시작일  = 오늘날짜인 경우 : 시작시간 <= 지금시간 -->
					(cl.class_start_date &lt; CURDATE()
						OR (cl.class_start_date = CURDATE()
							AND cl.class_start_time &lt;= CURTIME()))
					<!-- 종료일 >= 오늘날짜 -->
					<!-- 종료일  = 오늘날짜일 경우 : 종료시간 > 지금시간 -->
					AND (cl.class_end_date &gt; CURDATE()
							OR (cl.class_end_date = CURDATE()
								AND cl.class_end_time &gt; CURTIME()))
				</when>
				<!-- 클래스 상태 : 종료 -->
				<when test="searchData.classState == 'classState4'">
					<!-- 종료일 <= 오늘날짜 -->
					<!-- 종료일  = 오늘날짜일 경우 : 종료시간 <= 지금시간 -->
					cl.class_end_date &lt; CURDATE()
						OR (cl.class_end_date = CURDATE()
							AND cl.class_end_time &lt;= CURTIME())
				</when>
				<!-- 클래스 상태 : 전체(searchData.classState == 'classState0') -->			
				<otherwise>
					1=1
				</otherwise>
			</choose>
			<!-- 클래스 요일 -->
			<if test="searchData.classDay != null and searchData.classDay != '0000000' and !searchData.classDay.equals('')">
			AND (
			  (SUBSTRING(#{searchData.classDay}, 1, 1) = '1' AND SUBSTRING(cl.class_day, 1, 1) = '1') OR
			  (SUBSTRING(#{searchData.classDay}, 2, 1) = '1' AND SUBSTRING(cl.class_day, 2, 1) = '1') OR
			  (SUBSTRING(#{searchData.classDay}, 3, 1) = '1' AND SUBSTRING(cl.class_day, 3, 1) = '1') OR
			  (SUBSTRING(#{searchData.classDay}, 4, 1) = '1' AND SUBSTRING(cl.class_day, 4, 1) = '1') OR
			  (SUBSTRING(#{searchData.classDay}, 5, 1) = '1' AND SUBSTRING(cl.class_day, 5, 1) = '1') OR
			  (SUBSTRING(#{searchData.classDay}, 6, 1) = '1' AND SUBSTRING(cl.class_day, 6, 1) = '1') OR
			  (SUBSTRING(#{searchData.classDay}, 7, 1) = '1' AND SUBSTRING(cl.class_day, 7, 1) = '1')
			)
			</if>
			<!-- 클래스 시작일 -->
			<if test="searchData.classStartDate != null and !searchData.classStartDate.equals('')">
			AND
				cl.class_start_Date &gt;= #{searchData.classStartDate}
			</if>
			<!-- 클래스 종료일 -->
			<if test="searchData.classEndDate != null and !searchData.classEndDate.equals('')">
			AND
				cl.class_end_Date &lt;= #{searchData.classEndDate}
			</if>
			<!-- 클래스 시작시간 -->
			<if test="searchData.classStartTime != ':00' and !searchData.classStartTime.equals('')">
			AND
				cl.class_start_time &gt;= #{searchData.classStartTime}
			</if>
			<!-- 클래스 종료시간 -->
			<if test="searchData.classEndTime != ':00' and !searchData.classEndTime.equals('')">
			AND
				cl.class_end_time &lt;= #{searchData.classEndTime}
			</if>
			<!-- 기타 제공사항 -->
			<if test="searchData.classOffering != null and searchData.classOffering != '0000000' and !searchData.classOffering.equals('')">
			AND
				SUBSTRING(class_offering, 1, 1) >= SUBSTRING(#{searchData.classOffering}, 1, 1)
					AND SUBSTRING(class_offering, 2, 1) >= SUBSTRING(#{searchData.classOffering}, 2, 1)
					AND SUBSTRING(class_offering, 3, 1) >= SUBSTRING(#{searchData.classOffering}, 3, 1)
					AND SUBSTRING(class_offering, 4, 1) >= SUBSTRING(#{searchData.classOffering}, 4, 1)
					AND SUBSTRING(class_offering, 5, 1) >= SUBSTRING(#{searchData.classOffering}, 5, 1)
					AND SUBSTRING(class_offering, 6, 1) >= SUBSTRING(#{searchData.classOffering}, 6, 1)
					AND SUBSTRING(class_offering, 7, 1) >= SUBSTRING(#{searchData.classOffering}, 7, 1)
			</if>
			<!-- 클래스 금액 -->
			AND
				cl.class_price BETWEEN #{searchData.minAmount} AND #{searchData.maxAmount}
			ORDER BY
				<choose>
					<when test="searchData.sort != null and searchData.sort == 'sort_popular'">
						resTotalCount DESC
						, bookmarkCount DESC
					</when>
					<otherwise>
						cl.class_idx DESC
					</otherwise>
				</choose>
		) AS subquery;
	</select>
	
	<!-- 북마크 추가 기능 -->
	<insert id="insertBookmark">
		INSERT INTO bookmark
		VALUES (
			null
			, #{member_id}
			, #{class_idx}
		)
	</insert>
</mapper>