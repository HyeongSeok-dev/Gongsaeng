<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.gongsaeng.mapper.ReviewMapper">
	<!-- 리뷰 등록 -->
	<insert id="insertReview"> 
		INSERT 
		INTO review
		VALUES (#{review_idx}
				,#{member_id}
				,#{review_content}
				,#{review_score}
				,#{pay_num}
				,#{class_idx}
				,now()
				,#{review_img_1}
				,null
				,null
				,1
				,#{review_kind}
				,#{review_detail}
				,#{review_cheap}
				,#{review_explanation}
				,#{review_interior}
				,#{review_trendy}
				,#{review_large}
				,#{review_meeting}
				,#{review_comfortable}
				,#{review_parking}
				,#{review_clean_toilet}
				,#{review_etc_fast}
				,#{review_no_keyword}
				,#{review_like}
				,0
				)
	</insert>

	<!-- 업체이름 불러오기 -->
	<select id="selectCompanyName" parameterType="int" resultType="String">
	    SELECT com_name
	    FROM company
	    WHERE com_idx = #{com_idx}
	</select>

	<!-- 클래스이름 불러오기 -->
	<select id="selectClassTitle" parameterType="int" resultType="String">
	    SELECT class_title
	    FROM class
	    WHERE class_idx = #{class_idx}
	</select>
	
	<!-- 리뷰 갯수 -->
	<select id="countReview" resultType="int">
	    SELECT COUNT(*)
	    FROM review
	    WHERE class_idx = #{class_idx}
	</select>
	
	<!-- 별점 평균 -->
	<select id="averageReview" parameterType="int" resultType="double">
		SELECT ROUND(AVG(review_score)/2,2)
		FROM review
	    WHERE class_idx = #{class_idx}
	</select>

	<!-- 리뷰 리스트 -->
	<select id="allReviewList" parameterType="int" resultType="review">
	    SELECT review_idx, r.member_id, review_content, review_score, pay_num, class_idx, review_regdate, review_img_1, review_img_2, review_img_3, review_status, review_kind, review_detail, review_cheap, review_explanation, review_interior, review_trendy, review_large, review_meeting, review_comfortable, review_parking, review_clean_toilet, review_etc_fast, review_no_keyword, review_like, review_like_count, m.member_img, m.member_nick
	    FROM review r
	    LEFT JOIN member m ON r.member_id = m.member_id
	    WHERE r.class_idx = #{class_idx}
	    ORDER BY r.review_idx DESC
	</select>

	<!-- 리뷰 수정 뷰페이지-->
	<select id="modifyReview" parameterType="int" resultType="review">
	    SELECT * 
	    FROM review
	    WHERE review_idx = #{review_idx}
	</select>
	
	<!-- 글 삭제 - DELETE -->
	<delete id="removeReview" parameterType="int">
		DELETE FROM review
		WHERE review_idx = #{review_idx}
	</delete>
	
	<!-- 일치하는 레코드 내의 파일명 삭제(널스트링으로 값 수정) - UPDATE -->
	<update id="updateReviewFile">
		UPDATE review
		SET 
			review_img_1 = CASE WHEN review_img_1 = #{review_img_1} THEN '' ELSE review_img_1 END
		WHERE
			review_idx = #{review_idx}	
	</update>
	
	<!-- 리뷰 수정(UPDATE) -->
	<update id="updateReview" parameterType="kr.co.gongsaeng.vo.ReviewVO">
	    UPDATE review
	    SET
	        <if test="member_id != null"> member_id = #{member_id}</if>
	        <if test="review_content != null">, review_content = #{review_content}</if>
	        <if test="review_score != null">, review_score = #{review_score}</if>
	        <if test="review_kind != null">, review_kind = #{review_kind}</if>
	        <if test="review_detail != null">, review_detail = #{review_detail}</if>
	        <if test="review_cheap != null">, review_cheap = #{review_cheap}</if>
	        <if test="review_explanation != null">, review_explanation = #{review_explanation}</if>
	        <if test="review_interior != null">, review_interior = #{review_interior}</if>
	        <if test="review_trendy != null">, review_trendy = #{review_trendy}</if>
	        <if test="review_large != null">, review_large = #{review_large}</if>
	        <if test="review_meeting != null">, review_meeting = #{review_meeting}</if>
	        <if test="review_comfortable != null">, review_comfortable = #{review_comfortable}</if>
	        <if test="review_parking != null">, review_parking = #{review_parking}</if>
	        <if test="review_clean_toilet != null">, review_clean_toilet = #{review_clean_toilet}</if>
	        <if test="review_etc_fast != null">, review_etc_fast = #{review_etc_fast}</if>
	        <if test="review_no_keyword != null">, review_no_keyword = #{review_no_keyword}</if>
	        <if test="review_img_1 != null and review_img_1 != ''">, review_img_1 = #{review_img_1}</if>
	        <if test="review_like != null">, review_like = #{review_like}</if>
	    WHERE review_idx = #{review_idx}
	</update>
	
	<!-- 리뷰 내용 가져오기 -->
	<select id="getReview" parameterType="int" resultType="review">
		SELECT *
		FROM review
		WHERE review_idx = #{review_idx}
	</select>
	
	<!-- 이런 점이 좋았어요 -->
	<select id="countReviewsByComId" resultType="reviewcount">
	    SELECT
	        class_idx,
	        SUM(review_kind) as review_kind,
	        SUM(review_detail) as review_detail,
	        SUM(review_cheap) as review_cheap,
	        SUM(review_explanation) as review_explanation,
	        SUM(review_interior) as review_interior,
	        SUM(review_trendy) as review_trendy,
	        SUM(review_large) as review_large,
	        SUM(review_meeting) as review_meeting,
	        SUM(review_comfortable) as review_comfortable,
	        SUM(review_parking) as review_parking,
	        SUM(review_clean_toilet) as review_clean_toilet,
	        SUM(review_etc_fast) as review_etc_fast,
	        SUM(review_no_keyword) as review_no_keyword
	    FROM review
	    WHERE class_idx = #{classIdx}
	    GROUP BY class_idx
	</select>
	
	<!-- 리뷰 정렬 -->
	<select id="selectReviewsByNewest" parameterType="int" resultType="review">
    	SELECT * 
    	FROM review 
    	WHERE class_idx = #{class_idx} 
    	ORDER BY review_regdate DESC
	</select>
	
<!-- 	<select id="selectReviewsByHighestScore" parameterType="int" resultType="review"> -->
<!-- 	    SELECT *  -->
<!-- 	    FROM review  -->
<!-- 	    WHERE com_id = #{com_id}  -->
<!-- 	    ORDER BY review_score DESC -->
<!-- 	</select> -->

<!-- 	<select id="selectReviewsByLowestScore" parameterType="int" resultType="review"> -->
<!-- 	    SELECT *  -->
<!-- 	    FROM review  -->
<!-- 	    WHERE com_id = #{com_id}  -->
<!-- 	    ORDER BY review_score ASC -->
<!-- 	</select> -->

	<!-- 리뷰 정렬(최신순|별점높은순|별점낮은순 ~ 사진/영상 리뷰만 보기) -->
	<select id="getSortedReviews" resultType="review">
	    SELECT * , m.member_nick
	    FROM review r
		LEFT JOIN member m ON r.member_id = m.member_id
	    WHERE class_idx = #{classIdx}
   	    <if test="photoOnly">
      	  AND review_img_1 IS NOT NULL
	    </if>
	    <choose>
	        <when test="sortType == 'newest'">
	            ORDER BY review_regdate DESC
	        </when>
	        <when test="sortType == 'highest'">
	            ORDER BY review_score DESC, review_regdate DESC
	        </when>
	        <when test="sortType == 'lowest'">
	            ORDER BY review_score ASC, review_regdate DESC
	        </when>
<!-- 	        <when test="sortType == 'likes'"> -->
<!-- 	            ORDER BY likes_count DESC, review_update DESC -->
<!-- 	        </when> -->
	        <otherwise>
	            ORDER BY review_regdate DESC
	        </otherwise>
	    </choose>
	</select>
	
	<!-- 메뉴 이름으로 리뷰 필터링 -->
<!-- 	<select id="selectReviewsByMenuName" parameterType="map" resultType="review"> -->
<!-- 	    SELECT * -->
<!-- 	    FROM review -->
<!-- 	    WHERE com_id = #{comId} -->
<!-- 	    AND review_content LIKE CONCAT('%', #{menuName}, '%') -->
<!-- 	    ORDER BY review_update DESC -->
<!-- 	</select> -->

	<!-- 메뉴이름 불러오기  -->
<!-- 	<select id="selectReviewMenu" parameterType="int" resultType="String"> -->
<!-- 	    SELECT menu_name  -->
<!-- 	    FROM menu  -->
<!-- 		WHERE com_id = #{com_id}  -->
<!-- 	</select> -->

<!-- 키워드 검색 -->
<!-- 	<select id="selectReviewsByCategory" parameterType="review" resultType="review"> -->
<!-- 	    <choose> -->
<!--         	<when test="category == 'taste'"> -->
<!--         	SELECT r.*, u.user_nick -->
<!--             FROM review r -->
<!--             LEFT JOIN user u ON r.user_id = u.user_id -->
<!--             WHERE r.com_id = #{com_id} -->
<!-- 	         AND ( -->
<!-- 	         	review_content LIKE '%추천%' -->
<!-- 	                OR review_content LIKE '%맛%' -->
<!-- 	                OR review_content LIKE '%매콤%' -->
<!-- 	                OR review_content LIKE '%달달%' -->
<!-- 	                OR review_content LIKE '%싱겁%' -->
<!-- 	                OR review_content LIKE '%단%' -->
<!-- 	                OR review_content LIKE '%신맛%') -->
<!-- 	         ORDER BY r.review_update DESC        -->
<!--       	  </when> -->
<!--         <when test="category == 'satisfaction'"> -->
<!--             SELECT r.*, u.user_nick -->
<!--             FROM review r -->
<!--             LEFT JOIN user u ON r.user_id = u.user_id -->
<!--             WHERE r.com_id = #{com_id} -->
<!--              AND ( -->
<!--                 review_content LIKE '%좋은%' -->
<!-- 	                OR review_content LIKE '%나쁜%' -->
<!-- 	                OR review_content LIKE '%최고%' -->
<!-- 	                OR review_content LIKE '%만족%' -->
<!-- 	                OR review_content LIKE '%좋았%' -->
<!-- 	                OR review_content LIKE '%추천%' -->
<!-- 	                OR review_content LIKE '%친절%') -->
<!-- 	         ORDER BY r.review_update DESC        -->
<!--         </when> -->
<!-- 			<when test="category == 'service'"> -->
<!-- 			SELECT r.*, u.user_nick -->
<!--             FROM review r -->
<!--             LEFT JOIN user u ON r.user_id = u.user_id -->
<!--             WHERE r.com_id = #{com_id} -->
<!-- 				AND	(  -->
<!-- 				review_content LIKE '%친절%' -->
<!-- 					OR review_content LIKE '%나쁜%' -->
<!-- 					OR review_content LIKE '%좋은%' -->
<!-- 					OR review_content LIKE '%불친절%') -->
<!-- 	         ORDER BY r.review_update DESC        -->
					
<!-- 			</when>	 -->
<!-- 			<when test="category == 'waiting'"> -->
<!-- 			SELECT r.*, u.user_nick -->
<!--             FROM review r -->
<!--             LEFT JOIN user u ON r.user_id = u.user_id -->
<!--             WHERE r.com_id = #{com_id} -->
<!-- 				AND(  -->
<!-- 				review_content LIKE '%대기%' -->
<!-- 					OR review_content LIKE '%줄%' -->
<!-- 					OR review_content LIKE '%웨이팅%' -->
<!-- 					OR review_content LIKE '%회전%' -->
<!-- 					OR review_content LIKE '%브레이크%' -->
<!-- 					OR review_content LIKE '%시간%') -->
<!-- 	         ORDER BY r.review_update DESC        -->
					
<!-- 			</when>	 -->
<!-- 			<when test="category == 'quantity'"> -->
<!-- 			SELECT r.*, u.user_nick -->
<!--             FROM review r -->
<!--             LEFT JOIN user u ON r.user_id = u.user_id -->
<!--             WHERE r.com_id = #{com_id} -->
<!-- 				AND( -->
<!-- 				review_content LIKE '%양%' -->
<!-- 					OR review_content LIKE '%많은%' -->
<!-- 					OR review_content LIKE '%적은%' -->
<!-- 					OR review_content LIKE '%배부%' -->
<!-- 					OR review_content LIKE '%배고%') -->
<!-- 	         ORDER BY r.review_update DESC        -->
<!-- 			</when>	 -->
<!-- 		</choose> -->
<!-- 	</select> -->

	<!-- 키워드 검색 카운트 -->
	<select id="categoryCount">
	    SELECT * 
	    FROM review_category_count
	    WHERE class_idx = #{class_idx}
	</select>
	
	<!-- 신고 시 회원정보 불러오기(메일/폰번호) -->
	<select id="findUserById" resultType="kr.co.gongsaeng.vo.MemberVO">
		SELECT member_phone, member_email
		FROM member
		WHERE member_id = #{member_id}
	</select>
	
	<!-- 리뷰 신고 -->
	<insert id="insertReviewReport">
		INSERT INTO report
		VALUES(
			null
			,null
			,#{class_idx}
			,#{member_id}
			,#{report_reason}
			,#{report_content}
			,#{member_email}
			,1
			,#{member_phone}
			,1
			,now()
		)
	</insert>
	
	<!-- 댓글 쓰기 (INSERT)  -->
	<insert id="insertTinyReplyReview">
		<!-- 새 댓글 번호 계산 -->
		<selectKey keyProperty="comment_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(comment_num), 0)
			FROM comment
		</selectKey>
		INSERT
		INTO comment
		VALUES (
			#{comment_num} + 1    -- reply_num(selectKey 로 조회된 값 활용):comment_num
			, #{review_idx}      -- board_num(전달받은 값 사용):원본글
			, #{member_id}     -- reply_name(전달받은 값 사용):user_id
			, 1
			, #{comment_content}  -- reply_content(전달받은 값 사용)
			, now()             -- reply_date
			, 1
			, #{comment_num} + 1  -- 참조글번호(reply_re_ref)(새 댓글 번호와 동일하게 지정)
			, 0                 -- 들여쓰기레벨(새 댓글이므로 기본값 0)
			, 0                 -- 순서번호(새 댓글이므로 기본값 0)
		);
	</insert>
	
	<!-- 댓글 목록 조회 (SELECT) -->
<!-- 	<select id="selectTinyReplyReviewList" resultType="map"> -->
<!-- 		SELECT c.*, u.user_nick  -->
<!-- 		FROM comment c  -->
<!-- 		LEFT JOIN user u ON c.user_id = u.user_id -->
<!-- 		WHERE -->
<!-- 			c.review_num = #{review_num} -->
<!-- 		ORDER BY -->
<!-- 			c.comment_re_ref ASC -->
<!-- 			, c.comment_re_seq ASC -->
<!-- 	</select> -->

	<!-- 댓글 작성자 조회 - SELECT -->
	<!-- 단, 조회 결과를 동일한 Map 객체에 저장하기 위해 댓글번호도 함께 조회(생략 시 작성자만 저장됨) -->
	<select id="selectTinyReplyReviewWriter" resultType="map">
		SELECT 
			comment_num
			, member_id
		FROM comment
		WHERE
		 comment_num = #{comment_num}
	</select>
	
	<!-- 댓글 삭제 - DELETE -->
	<delete id="deleteTinyReplyReview">
		DELETE
		FROM comment
		WHERE
			comment_num = #{comment_num}
	</delete>
	
	<insert id="insertTinyReReplyReview">
		<selectKey keyProperty="result" resultType="map" order="BEFORE">
			SELECT 
				IFNULL(MAX(comment_num), 0) AS comment_num
				, (
					SELECT 
						IFNULL(MAX(comment_re_seq), 0) 
					FROM comment
					WHERE 
						comment_num = #{comment_num}
						AND comment_re_ref = ${comment_re_ref}
				) AS comment_re_seq
			FROM comment
		</selectKey>
		
		<!-- selectKey 를 통해 조회된 복수개의 값은 result 라는 이름으로 관리됨 -->
		INSERT
		INTO comment
		VALUES (
			#{result.comment_num} + 1        -- reply_num(selectKey 로 조회된 값 + 1)
			, #{review_idx}                 -- board_num(전달받은 값 사용)
			, #{member_id}                -- reply_name(전달받은 값 사용)
			, 1
			, #{comment_content}             -- reply_content(전달받은 값 사용)
			, now()                        -- reply_date
			, 1
			, #{comment_re_ref}              -- 참조글번호(reply_re_ref)(전달받은 값 사용)
			, #{comment_re_lev} + 1          -- 들여쓰기레벨(reply_re_lev)(전달받은 값 + 1)
			, #{result.comment_re_seq} + 1   -- 순서번호(reply_re_seq)(selectKey 로 조회된 값 + 1)
		);
	</insert>
	
	<!-- 예약완료 방문 횟수 카운트 -->
<!-- 	<select id="selectCountReservation" parameterType="map" resultType="int"> -->
<!-- 		SELECT COUNT(*)  -->
<!-- 		FROM reservation -->
<!-- 		WHERE user_idx = #{userIdx} AND -->
<!-- 		res_status = 3 AND -->
<!-- 		com_id = #{comId} -->
<!-- 	</select> -->
	
	<!-- 각 리뷰에 대한 댓글 갯수 카운트 -->
	<select id="selectCountComment" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM comment
		WHERE review_idx = #{review_idx}	
	</select>
	
	<!-- 이런 곳 좋아요 출력 -->
	<select id="getCompanyLike" resultType="int">
	    SELECT COUNT(*)
	    FROM review
	    WHERE class_idx = #{classIdx} AND review_like = 1;
	</select>
	
	<!-- 예약번호 1개당 1개의 리뷰만 작성 가능 -->
	<select id="selectReservationList" resultType="map">
		SELECT 
		    p.pay_num,
		    p.res_visit_date,
		    p.res_visit_time,
		    COALESCE(a.review_count, 0) AS review_idx
		FROM 
		    payment p
		LEFT JOIN 
		    (SELECT 
		         pay_num, 
		         COUNT(*) AS review_count 
		     FROM 
		         review
		     GROUP BY 
		         pay_num) a ON p.pay_num = a.pay_num
		WHERE 
		    p.member_id = #{member_id} 
		    AND p.class_idx= #{classIdx}
		    AND p.pay_status = 1;
	</select>	
	
	<!-- 리뷰작성 포인트 적립 -->
	<insert id="updatePoint">
		<selectKey resultType="int" order="BEFORE" keyProperty="point_idx">
			SELECT IFNULL(MAX(point_idx), 0)
			FROM point
		</selectKey>
		Insert into point 
		values(
			#{point_idx}+1
			,#{member_id}
			,200
			,2
			,"0"
			,1
			,now()
		)
	</insert>
	



	
	
	<!-- 방문횟수 카운트 -->
	<select id="selectCountResCom" parameterType="map" resultType="int">
		SELECT COUNT(*) 
		FROM payment
		WHERE member_id = #{memberId} AND
		class_idx = #{classIdx}
	</select>
	
	<!-- class_idx값 구하기 -->
<!-- 	<select id="selectClassIdxInfo" resultType="int"> -->
<!-- 		SELECT class_idx -->
<!-- 	    FROM payment -->
<!-- 	    WHERE pay_num = #{pay_num} -->
<!-- 	</select> -->
	


</mapper>