<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.gongsaeng.mapper.ReviewMapper">
	<!-- 리뷰 등록 -->
	<insert id="insertReview"> 
		INSERT 
		INTO review
		VALUES (#{review_idx}
				,'user12345'
				,'0'
				,#{review_content}
				,#{review_score}
				,1
				,now()
				,#{review_img_1}
				,NULL
				,NULL
				,1
				,1
				,#{review_kind}
				,#{review_detail}
				,#{review_cheap}
				,#{review_explanation}
				,#{review_interior}
				,#{review_trendy}
				,#{review_large}
				,#{review_meeting}
				,#{review_comfortable}
				,#{review_parking}
				,#{review_clean_toilet}
				,#{review_etc_fast}
				,#{review_no_keyword}
				)
	</insert>





	<!-- 업체이름 불러오기 -->
	<select id="selectCompanyName" parameterType="int" resultType="String">
	    SELECT com_name
	    FROM company
	    WHERE com_idx = #{com_idx}
	</select>
	
	<!-- 클래스이름 불러오기 -->
	<select id="selectClassTitle" parameterType="int" resultType="String">
	    SELECT class_title
	    FROM class
	    WHERE class_idx = #{class_idx}
	</select>
	
	<!-- 방문횟수 카운트 -->
	<select id="selectCountResCom" parameterType="map" resultType="int">
		SELECT COUNT(*) 
		FROM payment
		WHERE member_id = #{memberId} AND
		com_idx = #{comIdx}
	</select>
	
	<!-- 예약번호 1개당 1개의 리뷰만 작성 가능 -->
<!-- 	<select id="selectReservationList" resultType="map"> -->
<!-- 		SELECT  -->
<!-- 		    p.pay_num,  -->
<!-- 		    COALESCE(a.review_count, 0) AS review_num -->
<!-- 		FROM  -->
<!-- 		    payment p -->
<!-- 		LEFT JOIN  -->
<!-- 		    (SELECT  -->
<!-- 		         pay_num,  -->
<!-- 		         COUNT(*) AS review_count  -->
<!-- 		     FROM  -->
<!-- 		         review -->
<!-- 		     GROUP BY  -->
<!-- 		         res_idx) a ON r.res_idx = a.res_idx -->
<!-- 		WHERE  -->
<!-- 		    r.user_idx = #{userIdx}  -->
<!-- 		    AND r.com_id = #{comId} -->
<!-- 		    AND r.res_status = 3; -->
<!-- 	</select>	 -->
	
	<!-- 리뷰작성 포인트 적립 -->
	<insert id="updatePoint">
		<selectKey resultType="int" order="BEFORE" keyProperty="point_idx">
			SELECT IFNULL(MAX(point_idx), 0)
			FROM point
		</selectKey>
		Insert into point 
		values(
			#{point_idx}+1
			,#{member_id}
			,200
			,2
			,0
			,1
			,now()
		)
	</insert>
	
	<!-- 일치하는 레코드 내의 파일명 삭제(널스트링으로 값 수정) - UPDATE -->
	<update id="updateReviewFile">
		UPDATE review
		SET 
			review_img_1 = CASE WHEN review_img_1 = #{review_img_1} THEN '' ELSE review_img_1 END
		WHERE
			review_idx = #{review_idx}	
	</update>
	
	<!-- 리뷰 수정 뷰페이지-->
	<select id="modifyReview" parameterType="int" resultType="review">
	    SELECT * 
	    FROM review
	    WHERE review_idx = #{review_idx}
	</select>

	<!-- 글 삭제 - DELETE -->
	<delete id="removeReview" parameterType="int">
		DELETE FROM review
		WHERE review_idx = #{review_idx}
	</delete>
	
	<!-- 신고 시 회원정보 불러오기(메일/폰번호) -->
	<select id="findUserById" resultType="kr.co.gongsaeng.vo.MemberVO">
		SELECT member_phone, member_email
		FROM member
		WHERE member_id = #{member_id}
	</select>
	
	<!-- 댓글 작성자 조회 - SELECT -->
	<!-- 단, 조회 결과를 동일한 Map 객체에 저장하기 위해 댓글번호도 함께 조회(생략 시 작성자만 저장됨) -->
<!-- 	<select id="selectTinyReplyReviewWriter" resultType="map"> -->
<!-- 		SELECT  -->
<!-- 			comment_num -->
<!-- 			, member_id -->
<!-- 		FROM comment -->
<!-- 		WHERE -->
<!-- 		 comment_num = #{comment_num} -->
<!-- 	</select> -->

	<!-- 댓글 목록 조회 (SELECT) -->
<!-- 	<select id="selectTinyReplyReviewList" resultType="map"> -->
<!-- 		SELECT c.*, u.user_nick  -->
<!-- 		FROM comment c  -->
<!-- 		LEFT JOIN user u ON c.user_id = u.user_id -->
<!-- 		WHERE -->
<!-- 			c.review_num = #{review_num} -->
<!-- 		ORDER BY -->
<!-- 			c.comment_re_ref ASC -->
<!-- 			, c.comment_re_seq ASC -->
<!-- 	</select> -->

	<!-- 일치하는 레코드 내의 파일명 삭제(널스트링으로 값 수정) - UPDATE -->
<!-- 	<update id="updateReviewFile"> -->
<!-- 		UPDATE review -->
<!-- 		SET  -->
<!-- 			review_img_1 = CASE WHEN review_img_1 = #{review_img_1} THEN '' ELSE review_img_1 END -->
<!-- 		WHERE -->
<!-- 			review_idx = #{review_idx}	 -->
<!-- 	</update> -->


	<!-- 리뷰 리스트 -->
	<select id="allReviewList" parameterType="int" resultType="review">
	    SELECT r.*, m.member_nick
	    FROM review r
	    LEFT JOIN member m ON r.member_id = m.member_id
	    WHERE r.class_idx = #{class_idx}
	    ORDER BY r.review_idx DESC
	</select>
	
	<!-- 리뷰 신고 -->
	<insert id="insertReviewReport">
		INSERT
		INTO report(
		 review_idx,
		 class_idx,
		 member_id,
		 report_reason,
		 report_content,
		 member_email,
		 report_status,
		 member_phone,
		 report_category
		 )
	      	VALUES (
		#{review_idx},
		#{class_idx},
		#{member_id},
		#{report_reason},
		#{report_content},
		#{member_email},
		1, 
		#{member_phone},
		1
		)
	</insert>
	
	<!-- 댓글 쓰기 (INSERT)  -->
	<insert id="insertTinyReplyReview">
		<!-- 새 댓글 번호 계산 -->
		<selectKey keyProperty="comment_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(comment_num), 0)
			FROM comment
		</selectKey>
		INSERT
		INTO comment
		VALUES (
			#{comment_num} + 1    -- reply_num(selectKey 로 조회된 값 활용):comment_num
			, #{review_idx}      -- board_num(전달받은 값 사용):원본글
			, #{member_id}     -- reply_name(전달받은 값 사용):user_id
			, 1
			, #{comment_content}  -- reply_content(전달받은 값 사용)
			, now()             -- reply_date
			, 1
			, #{comment_num} + 1  -- 참조글번호(reply_re_ref)(새 댓글 번호와 동일하게 지정)
			, 0                 -- 들여쓰기레벨(새 댓글이므로 기본값 0)
			, 0                 -- 순서번호(새 댓글이므로 기본값 0)
		);
	</insert>


</mapper>